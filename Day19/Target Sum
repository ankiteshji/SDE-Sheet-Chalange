
from typing import List
def solve(ind,target,arr,dp):
    if ind<0:
        if target==0:
            return 1
        else:
            return 0
    if dp[ind][target]!=-1:
        return dp[ind][target]

    notpick =solve(ind-1,target,arr,dp)
    pick=0
    if arr[ind]<=target:
        pick=solve(ind-1,target-arr[ind],arr,dp)
    dp[ind][target]=(pick+notpick)
    return dp[ind][target]
    
def targetSum(arr: List[int], target: int) -> int:
    n=len(arr)
    final=sum(arr)
    d=target
    target=(final-d)//2
    if (final-d)%2!=0 or (final-d)<0:
        return 0
    dp=[[-1 for _ in range(1+target)]for _ in range(n)]
    return solve(n-1,target,arr,dp)
    




    
