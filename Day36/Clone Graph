from os import *
from sys import *
from collections import *
from math import *

# Class for graph node is as follows:
class graphNode:
    def __init__(self, *args):
        if(len(args) == 0):
            self.data = 0
            self.neighbours = []

        elif(len(args) == 1):
            self.data = args[0]
            self.neighbours = []

        elif(len(args) == 2):
            self.data = args[0]
            self.neighbours = args[1]

    def __del__(self):
        self.neighbours.clear()

def bfs(node,copies):
    if not node:
        return None
    copy=graphNode(node.data)
    copies[node]=copy
    q=[node]

    while q:
        node=q.pop()
        
        for nbr in node.neighbours:
            if nbr not in copies:
                copies[nbr]=graphNode(nbr.data)
                q.append(nbr)
            copies[node].neighbours.append(copies[nbr])
    
    return copy        
    
    
def cloneGraph(node):
    # Write your code here.
    clone={}
    return bfs(node,clone)
    
