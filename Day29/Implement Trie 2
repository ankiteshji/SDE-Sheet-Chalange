from os import *
from sys import *
from collections import *
from math import *
class TrieNode:
    def __init__(self):
        # Write your code here.
        self.links=[None]*26
        self.endWith=0
        self.countPrefix=0
    
    def isContainKey(self,char):

        return self.links[ord(char)-ord('a')]!=None

    def get(self,char):
        self.char=char

        return self.links[ord(char)-ord('a')]
    def put(self,char,node):

        self.links[ord(char)-ord('a')]=node
    def increaseEnd(self):
        self.endWith+=1
    def increasePrefix(self):
        self.countPrefix+=1
    def reducePrefix(self):
        self.countPrefix-=1
    def reduceEnd(self):
        self.endWith-=1
    def getEnd(self):
        return self.endWith
    def getPrefix(self):
        return self.countPrefix
class Trie:
    
    def __init__(self):
        self.root=TrieNode()

    def insert(self, word):
        # Write your code here.
        node=self.root
        for char in word:
            if not node.isContainKey(char):
                node.put(char,TrieNode())
            node=node.get(char)
            node.increasePrefix()
        node.increaseEnd()

    def countWordsEqualTo(self, word):
        node=self.root

        for char in word:
            if node.isContainKey(char):
                node=node.get(char)
            else:
                return 0
        return node.getEnd()
        

    def countWordsStartingWith(self, word):
        node=self.root
        for char in word:
            if not node.isContainKey(char):
                return 0
            node=node.get(char)

        return node.getPrefix()


    def erase(self, word):
        # Write your code here.
        node=self.root

        for char in word:
            if node.isContainKey(char):
                node=node.get(char)
                node.reducePrefix()
           

        node.reduceEnd()

